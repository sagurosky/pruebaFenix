package org.cimientos.intranet.web.controller;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.cimientos.intranet.modelo.Beca;
import org.cimientos.intranet.modelo.EstadoBeca;
import org.cimientos.intranet.modelo.informe.EstadoInforme;
import org.cimientos.intranet.modelo.informe.FichaPresentacion;
import org.cimientos.intranet.modelo.informe.InformeIS1;
import org.cimientos.intranet.modelo.perfil.EstadoAlumno;
import org.cimientos.intranet.modelo.perfil.PerfilAlumno;
import org.cimientos.intranet.modelo.perfilPadrino.PerfilPadrino;
import org.cimientos.intranet.modelo.perfilPadrino.TipoPadrino;
import org.cimientos.intranet.servicio.AlumnoSrv;
import org.cimientos.intranet.servicio.BecaSvr;
import org.cimientos.intranet.servicio.InformeFPSrv;
import org.cimientos.intranet.servicio.InformeIS1Srv;
import org.cimientos.intranet.utils.Formateador;
import org.cimientos.intranet.utils.GeneradorInformesAutomaticos;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

/**
 * @author plabaronnie
 * Clase que se utiliza para  hacer la redireccion (mapeo) a las vistas.
 * Extiende de BaseController para incluir el Template
 */
@Controller
@RequestMapping("/reasignacionBecas/*")
public class ReasignacionBecasController extends BaseController{
	
	@Autowired
	private AlumnoSrv srvAlumno;
	
	@Autowired
	public BecaSvr srvBeca;
	
	@Autowired
	public GeneradorInformesAutomaticos generadorInformes;
	
	@Autowired
	private InformeFPSrv srvInformeFP;
	
	@Autowired
	private InformeIS1Srv srvInformeIS1;
	
	/**
	 * Recupera la lista de todos las Becas persistidos en la DB.
	 * 
	 * @return la vista la vista con las 2 tablas de becas y de alumnos
	 */
	@RequestMapping("/reasignacionBecas/reasignacionBecasView.do")
	public ModelAndView verAsignacionBecas(){
		Map<String, Object> resul = new HashMap<String, Object>();
		resul.put("becas", srvBeca.obtenerBecasCicloActual());
		resul.put("estadosBeca", EstadoBeca.getListaEstados());
		resul.put("tiposPadrino", TipoPadrino.getListaTipos());
		return forward("reasignacionBecas/reasignacionBecas", resul);
	}
	
	/**
	 * Asigna los alumnos seleccionados a la beca seleccionada y actualiza el contador de asignaciones en la beca elegida.
	 * 
	 * @return la vista de la lista de Becas persistidas
	 */
	@RequestMapping("/reasignacionBecas/reasignacionBecas.do")
	public ModelAndView asignarBecas( @RequestParam(required=false,value="idBeca") Long idBeca,
			@RequestParam(required=false,value="alumnosSeleccionados") String alumnosSeleccionados){
		Map<String, Object> resul = new HashMap<String, Object>();
		if(idBeca != null && StringUtils.isNotBlank( alumnosSeleccionados )){
			Beca becaSeleccionada = srvBeca.obtenerPorId(idBeca);
			List<Long> candidatosId = Formateador.toListOfLongs( alumnosSeleccionados);
			if(becaTieneCupo(becaSeleccionada, candidatosId)){
				List<PerfilAlumno> becados = srvAlumno.obtenerAlumnosPorIds(candidatosId);
				for (PerfilAlumno perfilAlumno : becados){
					if(!perfilAlumno.getBeca().getPadrino().equals(becaSeleccionada.getPadrino())){
						PerfilPadrino padrino = becaSeleccionada.getPadrino();
						FichaPresentacion fp = null;
						if(perfilAlumno.getEstadoAlumno().equals(EstadoAlumno.INCORPORADO)){	
							fp = srvInformeFP.obtenerInformePorAlumno(perfilAlumno.getId());
							if(fp != null){
								if(fp.getEstado().equals(EstadoInforme.ENVIADO)){
									generadorInformes.generarInformeFP(padrino, becaSeleccionada, perfilAlumno, EstadoInforme.FINALIZADO, false, null);
								}
								else{
									fp.setBeca(becaSeleccionada);
									fp.setPadrino(padrino);
									fp.setFechaAlta(new Date());
									fp.setFechaUltimaModificacion(new Date());
									srvInformeFP.guardarInformeFP(fp);
								}
							}
							else{
								generadorInformes.generarInformeFP(padrino, becaSeleccionada, perfilAlumno, EstadoInforme.REVISION, false, null);
							}
						}
						else{
							if(perfilAlumno.getEstadoAlumno().equals(EstadoAlumno.RENOVADO) ||
									perfilAlumno.getEstadoAlumno().equals(EstadoAlumno.PENDIENTE) || 
									perfilAlumno.getEstadoAlumno().equals(EstadoAlumno.PENDIENTE_RENOVACION_CON_ASIGNACION)){
								fp = srvInformeFP.obtenerInformePorAlumnoPorCiclo(becaSeleccionada.getCiclo(), perfilAlumno.getId());
								InformeIS1 is1 = srvInformeIS1.obtenerInformePorAlumno(perfilAlumno.getId(), becaSeleccionada.getCiclo());
								if(fp != null){
									if(fp.getEstado().equals(EstadoInforme.ENVIADO)){
										if(perfilAlumno.getEstadoAlumno().equals(EstadoAlumno.RENOVADO))
											generadorInformes.generarInformeFP(padrino, becaSeleccionada, perfilAlumno, EstadoInforme.FINALIZADO, 
													true, is1);	
										else
											generadorInformes.generarInformeFP(padrino, becaSeleccionada, perfilAlumno, 
													EstadoInforme.PENDIENTE_POR_RENOVACION, true, is1);										
									}
									else{
										fp.setBeca(becaSeleccionada);
										fp.setPadrino(padrino);
										fp.setFechaAlta(new Date());
										if(!perfilAlumno.getEstadoAlumno().equals(EstadoAlumno.RENOVADO)){
											fp.setEstado(EstadoInforme.PENDIENTE_POR_RENOVACION);	
											fp.setFpPorReasignacion(true);
										}
										fp.setFechaUltimaModificacion(new Date());
										srvInformeFP.guardarInformeFP(fp);
										if(is1 != null){
											if(!is1.getEstado().equals(EstadoInforme.ENVIADO)){
												is1.setPadrino(padrino);
												is1.setBeca(becaSeleccionada);
												is1.setFechaAlta(new Date());
												is1.setFechaCambioUltimoEstado(new Date());
												srvInformeIS1.guardarInformeIS1(is1);
											}
										}
									}
								}
								else{									
									fp = srvInformeFP.obtenerFPFinalizadaPorAlumno(perfilAlumno.getId());
									if(fp != null){
										if(perfilAlumno.getEstadoAlumno().equals(EstadoAlumno.RENOVADO))
											generadorInformes.generarInformeFP(padrino, becaSeleccionada, perfilAlumno, EstadoInforme.FINALIZADO, 
													true, is1);	
										else
											generadorInformes.generarInformeFP(padrino, becaSeleccionada, perfilAlumno, 
													EstadoInforme.PENDIENTE_POR_RENOVACION, true, is1);	
									}
									else{										
										if(perfilAlumno.getEstadoAlumno().equals(EstadoAlumno.RENOVADO))
											generadorInformes.generarInformeFP(padrino, becaSeleccionada, perfilAlumno, EstadoInforme.REVISION,
													true, is1);	
										else
											generadorInformes.generarInformeFP(padrino, becaSeleccionada, perfilAlumno, 
													EstadoInforme.PENDIENTE_POR_RENOVACION, true, is1);																
									}	
								}
							}
						}							
					}
				}
				srvBeca.reasignarAlumnosBeca(becaSeleccionada, becados);
				resul.put("mensaje", "Se han reasignado " + becados.size() + " alumnos a la beca seleccionada.");
			}else{
				resul.put("error", "La cantidad de candidatos seleccionados excede el máximo disponible de la beca.");
			}
			
		}else {
			resul.put("error", "Debe seleccionar 1 beca y al menos 1 alumno para realizar la asignación.");
		}
		resul.put("becas", srvBeca.obtenerBecasCicloActual());
		resul.put("estadosBeca", EstadoBeca.getListaEstados());
		resul.put("tiposPadrino", TipoPadrino.getListaTipos());
		return forward("reasignacionBecas/reasignacionBecas", resul);
	}

	/**
	 * Valida que la cantidad de alumnos seleccionados no exceda el cupo de la beca.
	 * Suma la cantidad de alumnos asignados a la cantidad de alumnos a asignar y esta
	 * debe ser menor o igual que el cupo total de la beca.
	 * 
	 * @param becaSeleccionada
	 * @param candidatosId
	 * @return
	 */
	private boolean becaTieneCupo(Beca becaSeleccionada,
			List<Long> candidatosId) {
		int cantAsignados = becaSeleccionada.getBecados().size() + candidatosId.size();
		return cantAsignados <= becaSeleccionada.getCantidad();
	}
	
	@RequestMapping("/reasignacionBecas/buscarAlumnos.do")
	public void buscarAlumnos(HttpServletResponse response,
			@RequestParam(required=false, value="becaId") Long becaId
			) throws JSONException {

			JSONObject resp = new JSONObject();
			
			try {
	
				JSONArray alumnos = new JSONArray();
				List<PerfilAlumno> filtrados = null;
				if(becaId != null && !becaId.equals(0L)){	
					Beca becaSeleccionada = srvBeca.obtenerPorId(becaId);	
					filtrados = srvAlumno.obtenerAlumnosPorZonaParaReasignacion(becaSeleccionada.getZona());
				}else{	
					filtrados = srvAlumno.obtenerAlumnosPorZonaParaReasignacion(null);
				}
				for (PerfilAlumno alumno : filtrados) {
					JSONArray alumnoObj = new JSONArray();
					alumnoObj.put(alumno.getId());
					alumnoObj.put(alumno.getEscuela().getLocalidad().getZona().getNombre());
					alumnoObj.put(alumno.getBeca().getPadrino().getDatosPersonales() != null ? 
							alumno.getBeca().getPadrino().getDatosPersonales().getApellido() + ", " 
							+ alumno.getBeca().getPadrino().getDatosPersonales().getNombre() 
							: alumno.getBeca().getPadrino().getEmpresa().getDenominacion());
					alumnoObj.put(alumno.getDatosPersonales().getApellido() + ", " + alumno.getDatosPersonales().getNombre() );
					alumnoObj.put(alumno.getEscuela().getNombre());
					alumnoObj.put(alumno.getAnioEscolar().getValor());
					alumnos.put(alumnoObj);
				}
				
				
				resp.put("aaData", alumnos);
			} catch (JSONException e) {
				e.printStackTrace();
			}
			response.setContentType("application/json");
			response.setHeader("Cache-Control", "no-cache");
			response.setCharacterEncoding("ISO-8859-1");
			try {
				response.getWriter().write(resp.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}

		}
	
}
