package org.cimientos.intranet.utils.cuentas;

import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.cimientos.intranet.modelo.CicloPrograma;
import org.cimientos.intranet.modelo.ResponsableAdulto;
import org.cimientos.intranet.modelo.ubicacion.Localidad;
import org.cimientos.intranet.utils.Formateador;

import com.cimientos.intranet.enumerativos.TipoDni;

/**
 * Esta clase representa un archivo de solicitud de apertura de cuenta para banco Galicia.
 * Genera una lista de arreglos de String (cada una representaria una linea en un archivo).
 * @author plabaronnie
 *
 */
public class ArchivoSolicitudCuentaGalicia extends ArchivoCuenta{
	
	private static final String CABA = "CABA";

	private static final String CIUDAD_AUTON_BSAS = "CIUDAD AUTON. BS.AS.";

	private static final String CAPITAL_FEDERAL = "CAPITAL FEDERAL";

	private String[] columnas = new String[]{"Apellido","Nombre","Tipo de Documento","Nro. de documento",
			"Sexo",	"Fecha de nacimiento",	"Nacionalidad",	"Nro. de Cuil",	"Ingresos",
			"Calle",	"Nro. de calle",	"Piso",	"Localidad",	"Cod. Postal",	"Provincia",
			"Nro. de Planta",	"Sucursal de pago",	"Telefono"};
	
	private String nombreHoja = "datosminimos";
	
	public ArchivoSolicitudCuentaGalicia(List<ResponsableAdulto> responsables,/* List<PerfilStaff> staff, */ CicloPrograma cicloActual) {
		super();
		DummyDatosFaltantes.completarDatosFaltantes(responsables/*, staff*/);
		this.generarDatos(responsables, /*staff,*/ cicloActual);
	}

	/**
	 * @param pagos
	 */
	private void generarDatos(List<ResponsableAdulto> responsables, /*List<PerfilStaff> staff,*/ CicloPrograma ciclo) {
		for (ResponsableAdulto responsable : responsables) {
			String[] columna = new String[columnas.length];
			columna[0] = this.getApellido(responsable.getApellido()); 
			columna[1] = this.getNombre(responsable.getNombre()); 
			columna[2] = this.getTipoDNI(responsable.getIdTipoDni()); 
			columna[3] = this.getNroDocumento(responsable.getDni());
			columna[4] = this.getSexo(responsable.getSexo());
			columna[5] = this.getFechaNacimiento(responsable.getFechaNacimiento());
			columna[6] = this.getNacionalidad(responsable.getNacionalidad());
			columna[7] = this.getNroCuil(responsable.getCuilCuit());
			columna[8] = this.getIngresos(ciclo);
			columna[9] = this.getCalle(responsable.getCalle());
			columna[10] = this.getNroCalle(responsable.getNroCalle());
			columna[11] = this.getPiso(responsable.getPiso());
			columna[12] = this.getLocalidad(responsable.getIdLocalidad());
			columna[13] = this.getCodPostal(responsable.getCodigoPostal());
			columna[14] = this.getProvincia(responsable.getIdLocalidad());
			columna[15] = this.getNroPlanta();
			columna[16] = this.getSucursalPago(responsable.getSucursalBanco().getNumeroSucursal());
			columna[17] = this.getTelefono(responsable.getTelefono());
			datos.add(columna);
		}
		
//		for (PerfilStaff pstaff : staff) {
//			String[] columna = new String[columnas.length];
//			columna[0] = this.getApellido(pstaff.getDatosPersonales().getApellido());
//			columna[1] = this.getNombre(pstaff.getDatosPersonales().getNombre());
//			columna[2] = this.getTipoDNI(pstaff.getIdTipoDni());
//			columna[3] = this.getNroDocumento(pstaff.getDatosPersonales().getDni());
//			columna[4] = this.getSexo(pstaff.getDatosPersonales().getSex());
//			columna[5] = this.getFechaNacimiento(pstaff.getDatosPersonales().getFechaNacimiento());
//			columna[6] = this.getNacionalidad(pstaff.getNacionalidad());
//			columna[7] = this.getNroCuil(pstaff.getCuilTitularCuenta());
//			columna[8] = this.getIngresos(ciclo);
//			columna[9] = this.getCalle(pstaff.getCalle());
//			columna[10] = this.getNroCalle(pstaff.getNroCalle());
//			columna[11] = this.getPiso(pstaff.getPiso());
//			columna[12] = this.getLocalidad(pstaff.getDatosPersonales().getLocalidad());
//			columna[13] = this.getCodPostal(pstaff.getCodigoPostal());
//			columna[14] = this.getProvincia(pstaff.getDatosPersonales().getLocalidad());
//			columna[15] = this.getNroPlanta();
//			columna[16] = this.getSucursalPago(pstaff.getSucursalPago());
//			columna[17] = this.getTelefono(pstaff.getDatosPersonales().getTelefono());
//			datos.add(columna);
//		}
	
	}



	/**
	 * @param montoIngreso
	 * @return
	 */
	private String getIngresos(CicloPrograma ciclo) {
		String montoBeca = getMontoBecaCicloActual(ciclo);
		if(montoBeca != null){
			int i = montoBeca.indexOf('.');
			return montoBeca.substring(0, i);
		}
		return "";
	}

	/**
	 * @param provincia 
	 * @param idLocalidad
	 * @return
	 */
	private String getProvincia(Localidad localidad) {
		if(localidad != null && localidad.getProvincia()!= null ){
			if(localidad.getNombre().equals(CABA)){
				return CAPITAL_FEDERAL;
			}
			return Formateador.quitarAcentos( localidad.getProvincia().getDescripcion() ).toUpperCase();
		}
		return "";
	}



	/**
	 * @param telefono1
	 * @return
	 */
	private String getTelefono(String telefono1) {
		if(StringUtils.isNotBlank( telefono1)){
			return telefono1;
		}
		return "";
	}

	/**
	 * @param string
	 * @return
	 */
	private String getSucursalPago(String sucursal) {
		if(StringUtils.isNotBlank( sucursal)){
			return StringUtils.leftPad(sucursal, 5, '0');
		}
		return "";
	}

	/**
	 * @param string
	 * @return
	 */
	private String getNroPlanta() {
		return "0000";
	}


	/**
	 * @param idLocalidad
	 * @return
	 */
	private String getLocalidad(Localidad localidad) {
		if(localidad != null){
			if(localidad.getNombre().equals(CABA)){
				return CIUDAD_AUTON_BSAS;
			}
			return Formateador.quitarAcentos( localidad.getNombre()).toUpperCase();
		}
		return "";
	}



	/**
	 * @param string
	 * @return
	 */
	private String getNacionalidad(String string) {
		if(StringUtils.isNotBlank(string)){
			return string.toUpperCase();
		}
		return "";
	}

	/**
	 * @param fechaNacimiento
	 * @return
	 */
	private String getFechaNacimiento(Date fechaNacimiento) {
		if(fechaNacimiento != null){
			return Formateador.formatearFecha(fechaNacimiento, "yyyyMMdd");
		}
		return "";
	}



	/**
	 * @param idTipoDni
	 * @return
	 */
	protected String getTipoDNI(TipoDni idTipoDni) {
		if(idTipoDni != null){
			if(idTipoDni.equals(TipoDni.DNI)){
				return "DU";
			}
			return idTipoDni.getValor();
		}
		return "";
	}

	/**
	 * @return the nombreHoja
	 */
	public String getNombreHoja() {
		return nombreHoja;
	}

	/**
	 * @param nombreHoja the nombreHoja to set
	 */
	public void setNombreHoja(String nombreHoja) {
		this.nombreHoja = nombreHoja;
	}

	/**
	 * @param nombre
	 * @return
	 */
	protected String getNombre(String nombre) {
		if(nombre.length() > 30){
			nombre = nombre.substring(0, 29);
		}
		nombre = Formateador.quitarAcentos(nombre);
		return nombre.toUpperCase();
	}

	/**
	 * @param apellido
	 * @return
	 */
	protected String getApellido(String apellido) {
		if(apellido.length() > 30){
			apellido = apellido.substring(0, 29);
		}
		apellido = Formateador.quitarAcentos(apellido);
		return apellido.toUpperCase();
	}	

	/**
	 * @param direccion
	 * @return
	 */
	protected String getCalle(String calle) {
		if(StringUtils.isNotBlank( calle)){
			return Formateador.quitarAcentos(calle).toUpperCase();
		}
		return "";
	}
}
